From 1037e70c96c546b3f4d27efe7830d9c09092b97e Mon Sep 17 00:00:00 2001
From: Chen Minqiang <ptpt52@gmail.com>
Date: Sun, 5 Jul 2020 10:42:52 +0800
Subject: [PATCH] options: force_forwarding support

This make the port forwarding force to work even
when the router is behind NAT

Signed-off-by: Chen Minqiang <ptpt52@gmail.com>
---
 miniupnpd/miniupnpd.c      | 4 ++++
 miniupnpd/miniupnpd.conf   | 2 ++
 miniupnpd/options.c        | 1 +
 miniupnpd/options.h        | 1 +
 miniupnpd/testgetifaddr.c  | 2 ++
 miniupnpd/testportinuse.c  | 2 ++
 miniupnpd/upnpglobalvars.h | 2 ++
 miniupnpd/upnpredirect.c   | 2 +-
 8 files changed, 15 insertions(+), 1 deletion(-)

--- a/miniupnpd.c
+++ b/miniupnpd.c
@@ -1241,6 +1241,10 @@ init(int argc, char * * argv, struct run
 			case UPNPEXT_IP:
 				use_ext_ip_addr = ary_options[i].value;
 				break;
+			case UPNP_FORCE_FORWARDING:
+				if(strcmp(ary_options[i].value, "yes") == 0)
+					SETFLAG(FORCEFORWARDINGMASK);
+				break;
 			case UPNPEXT_PERFORM_STUN:
 				if(strcmp(ary_options[i].value, "yes") == 0)
 					SETFLAG(PERFORMSTUNMASK);
--- a/miniupnpd.conf
+++ b/miniupnpd.conf
@@ -9,6 +9,8 @@
 # Setting ext_ip is also useful in double NAT setup, you can declare here
 # the public IP address.
 #ext_ip=
+#force forwarding enable for upnp: default is no
+#force_forwarding=yes
 # WAN interface must have public IP address. Otherwise it is behind NAT
 # and port forwarding is impossible. In some cases WAN interface can be
 # behind unrestricted full-cone NAT 1:1 when all incoming traffic is NAT-ed and
--- a/options.c
+++ b/options.c
@@ -34,6 +34,7 @@ static const struct {
 	{ UPNPEXT_IFNAME6, "ext_ifname6" },
 #endif
 	{ UPNPEXT_IP,	"ext_ip" },
+	{ UPNP_FORCE_FORWARDING, "force_forwarding" },
 	{ UPNPEXT_PERFORM_STUN, "ext_perform_stun" },
 	{ UPNPEXT_STUN_HOST, "ext_stun_host" },
 	{ UPNPEXT_STUN_PORT, "ext_stun_port" },
--- a/options.h
+++ b/options.h
@@ -21,6 +21,7 @@ enum upnpconfigoptions {
 	UPNPEXT_IFNAME6,		/* ext_ifname6 */
 #endif
 	UPNPEXT_IP,				/* ext_ip */
+	UPNP_FORCE_FORWARDING, /* force forwarding enable for upnp */
 	UPNPEXT_PERFORM_STUN,		/* ext_perform_stun */
 	UPNPEXT_STUN_HOST,		/* ext_stun_host */
 	UPNPEXT_STUN_PORT,		/* ext_stun_port */
--- a/testgetifaddr.c
+++ b/testgetifaddr.c
@@ -13,6 +13,8 @@
 #include "config.h"
 #include "getifaddr.h"
 
+int runtime_flags = 0;
+
 #if defined(__sun)
 /* solaris 10 does not define LOG_PERROR */
 #define LOG_PERROR 0
--- a/testportinuse.c
+++ b/testportinuse.c
@@ -14,6 +14,8 @@
 #include "config.h"
 #include "portinuse.h"
 
+int runtime_flags = 0;
+
 int main(int argc, char * * argv)
 {
 #ifndef CHECK_PORTINUSE
--- a/upnpglobalvars.h
+++ b/upnpglobalvars.h
@@ -84,6 +84,8 @@ extern int runtime_flags;
 
 #define PERFORMSTUNMASK    0x1000
 
+#define FORCEFORWARDINGMASK 0x2000
+
 #define SETFLAG(mask)	runtime_flags |= mask
 #define GETFLAG(mask)	(runtime_flags & mask)
 #define CLEARFLAG(mask)	runtime_flags &= ~mask
--- a/upnpredirect.c
+++ b/upnpredirect.c
@@ -444,7 +444,7 @@ upnp_redirect_internal(const char * rhos
 {
 	/*syslog(LOG_INFO, "redirecting port %hu to %s:%hu protocol %s for: %s",
 		eport, iaddr, iport, protocol, desc);			*/
-	if(disable_port_forwarding)
+	if(disable_port_forwarding && !GETFLAG(FORCEFORWARDINGMASK))
 		return -1;
 	if(add_redirect_rule2(ext_if_name, rhost, eport, iaddr, iport, proto,
 	                      desc, timestamp) < 0) {
